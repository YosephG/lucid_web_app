(function(){(this||window).webpackJsonp.registerAbsMids({"esri/layers/IntegratedMeshLayer":1230})})(),(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{1230:function(e,r,t){var o,n;o=[t.dj.c(e.i),r,t(12),t(2),t(1),t(9),t(8),t(0),t(77),t(489),t(179)],void 0===(n=function(e,r,o,n,i,s,a,p,y,d,l){return function(e){function r(r,t){var o=e.call(this)||this;return o.geometryType="mesh",o.operationalLayerType="IntegratedMeshLayer",o.type="integrated-mesh",o.profile="mesh-pyramids",o.elevationInfo=null,o}return n(r,e),r.prototype.normalizeCtorArgs=function(e,r){return"string"==typeof e?o({url:e},r):e},r.prototype.load=function(){var e=this,r=this.loadFromPortal({supportedTypes:["Scene Service"]}).always(function(){return e._fetchService()}).then(function(){return e._verifyRootNodeAndUpdateExtent()});return this.addResolvingPromise(r),this.when()},r.prototype.importLayerViewModule=function(e){switch(e.type){case"2d":return a.reject(new s("integrated-mesh-layer:view-not-supported","IntegratedMeshLayer is only supported in 3D"));case"3d":return a.create(function(e){return Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(61)]).then(function(){var r=[t(1243)];e.apply(null,r)}.bind(this)).catch(t.oe)})}},r.prototype._validateLayer=function(e){if(e.layerType&&"IntegratedMesh"!==e.layerType)throw new s("integrated-mesh-layer:layer-type-not-supported","IntegratedMeshLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new s("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new s("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"})},i([p.shared("esri.layers.IntegratedMeshLayer")],r.prototype,"declaredClass",void 0),i([p.property({type:String,readOnly:!0})],r.prototype,"geometryType",void 0),i([p.property()],r.prototype,"operationalLayerType",void 0),i([p.property({json:{read:!1},readOnly:!0})],r.prototype,"type",void 0),i([p.property({type:l,json:{origins:{service:{read:{source:"elevationInfo"}}},read:{source:"layerDefinition.elevationInfo"},write:{target:"layerDefinition.elevationInfo"}}})],r.prototype,"elevationInfo",void 0),i([p.subclass()],r)}(p.declared(y,d))}.apply(null,o))||(e.exports=n)}}]);